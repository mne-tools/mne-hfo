# See: https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
version: 2.1

jobs:
  docs-build:
    docker:
      - image: circleci/python:3.8.5-buster
    environment:
      CODECOV_TOKEN: "895aebcc-753e-49f2-b964-b70d38d471c4"
    steps:
      - checkout

      # make sure pandoc is on the system
      - run: sudo apt update && sudo apt install -y pandoc optipng

      # restore cache from last build. Unless __init__.py has changed since then
      - restore_cache:
          keys:
            - data-cache-0-{{ checksum "./mne_hfo/__init__.py" }}

      # Also restore pip cache to speed up installations
      - restore_cache: # ensure this step occurs *before* installing dependencies
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - pip-packages-v1-{{ .Branch }}-
            - pip-packages-v1-

      - run:
          name: Setup Python environment via Pipenv
          command: |
            sudo pip install --upgrade pip
            sudo pip install pipenv
            pipenv install --skip-lock --dev
            pipenv run pip install --upgrade --progress-bar off https://github.com/mne-tools/mne-python/zipball/main

      - run:
          name: Run style check
          command: |
            pipenv run make pep

      - run:
          name: Build the documentation
          command: |
            pipenv run make build-doc

      - persist_to_workspace:
          root: docs/_build
          paths: html

      - store_artifacts:
          path: docs/_build/html/
          destination: dev

      - save_cache:
          key: pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - "~/.local/share/virtualenvs/venv"

  docs-build-test:
    docker:
      - image: circleci/python:3.8.1-buster
    environment:
      CODECOV_TOKEN: "895aebcc-753e-49f2-b964-b70d38d471c4"
    steps:
      - restore_cache:
            keys:
              - source-cache-hfo

      - checkout

      - run:
          name: Complete checkout
          command: |
            if ! git remote -v | grep upstream; then
              git remote add upstream git://github.com/mne-tools/mne-hfo.git
            fi
            git fetch upstream

      - save_cache:
          key: source-cache-hfo
          paths:
            - ".git"

      # make sure pandoc is on the system
      - run: sudo apt update && sudo apt install -y pandoc

      # Load pip cache
      - restore_cache:
          keys:
            - pip-cache
      - restore_cache:
          keys:
            - user-install-bin-cache
              
      - run:
          name: Setup Python environment
          command: |
            python -m pip install --upgrade --progress-bar off --only-binary matplotlib -r requirements.txt
            python -m pip install --upgrade --progress-bar off -r requirements_testing.txt
            python -m pip install --upgrade --progress-bar off https://github.com/mne-tools/mne-python/zipball/main
            python -m pip install --progress-bar off https://github.com/sphinx-gallery/sphinx-gallery/zipball/master
            sudo python -m pip install -e .

      - save_cache:
          key: pip-cache
          paths:
            - ~/.cache/pip

      - save_cache:
          key: user-install-bin-cache
          paths:
            - ~/.local/lib/python3.8/site-packages
            - ~/.local/bin

      # Look at what we have and fail early if there is some library conflict
      - run:
          name: Check installation
          command: |
              which python
              python -c "import mne; mne.sys_info()"
              LIBGL_DEBUG=verbose python -c "import matplotlib.pyplot as plt; plt.figure()"
              python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
              python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"

      - run:
          name: Build the documentation
          command: |
            make build-doc

      - persist_to_workspace:
          root: docs/_build
          paths: html

      - store_artifacts:
          path: docs/_build/html/
          destination: dev

#      - run:
#          name: Check links
#          command: |
#            pipenv run make -C doc clean
#            pipenv run make -C docs linkcheck
#            pipenv run make -C doc linkcheck-grep

  docs-deploy:
    # will only be run on master branch
    docker:
      - image: node:8.10.0
    steps:
      - checkout

      - attach_workspace:
          at: docs/_build

      - run:
          name: Install and configure dependencies
          command: |
            npm install --global gh-pages@3.0
            git config --global user.email "circle@mne.com"
            git config --global user.name "Circle Ci"

      - add_ssh_keys:
          fingerprints:
            - "35:48:e2:58:4c:3f:44:b9:0e:64:40:60:06:d2:1f:bf"

      - run:
          # push built docs into the `dev` directory on the `gh-pages` branch
          name: Deploy docs to gh-pages branch
          command: gh-pages --dotfiles --message "doc updates [skip ci]" --dist docs/_build/html --dest ./dev

workflows:
  commit:
    jobs:
      - docs-build
      - docs-deploy:
          requires:
            - docs-build
          filters:
            branches:
              only: master

  scheduled:
    jobs:
      - docs-build

    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
