# See: https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
version: 2.1

jobs:
  build_doc:
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - restore_cache:
          name: Restore .git
          keys:
            - source-cache-hfo
      - checkout
      - run:
          name: Complete checkout
          command: |
            if ! git remote -v | grep upstream; then
              git remote add upstream https://github.com/mne-tools/mne-hfo.git
            fi
            git remote set-url upstream https://github.com/mne-tools/mne-hfo.git
            git fetch upstream
      - save_cache:
          name: Save .git
          key: source-cache-hfo
          paths:
            - ".git"
      - run:
          name: Check-skip
          command: |
            set -e
            export COMMIT_MESSAGE=$(git log --format=oneline -n 1);
            if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$COMMIT_MESSAGE" == *"[skip circle]"* ]] || [[ "$COMMIT_MESSAGE" == *"[circle skip]"* ]]); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi
      - run:
          name: Merge with upstream
          command: |
            echo $(git log -1 --pretty=%B) | tee gitlog.txt
            echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
            if [[ $(cat merge.txt) != "" ]]; then
              echo "Merging $(cat merge.txt)";
              git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
            fi
      - run:
          name: Set BASH_ENV
          command: |
            set -e
            curl https://raw.githubusercontent.com/mne-tools/mne-python/main/tools/setup_xvfb.sh -o setup_xvfb.sh
            chmod +x setup_xvfb.sh
            ./setup_xvfb.sh
            sudo apt install -qq graphviz optipng python3.9-venv python3-venv libxft2
            python3.9 -m venv ~/python_env
            echo "set -e" >> $BASH_ENV
            echo "export OPENBLAS_NUM_THREADS=4" >> $BASH_ENV
            echo "export XDG_RUNTIME_DIR=/tmp/runtime-circleci" >> $BASH_ENV
            echo "export PATH=~/.local/bin/:$PATH" >> $BASH_ENV
            echo "export DISPLAY=:99" >> $BASH_ENV
            echo "source ~/python_env/bin/activate" >> $BASH_ENV
            mkdir -p ~/.local/bin
            ln -s ~/python_env/bin/python ~/.local/bin/python
            echo "BASH_ENV:"
            cat $BASH_ENV
      - run:
          name: Setup pandoc
          command: sudo apt update && sudo apt install -y pandoc optipng
      - restore_cache:
          name: Restore pip cache
          keys:
            - pip-cache
      - restore_cache:
          name: Restore install-bin-cache
          keys:
            - user-install-bin-cache
      - run:
          name: Get Python running and install dependencies
          command: |
            python -m pip install --progress-bar off --upgrade pip setuptools wheel
            python -m pip install --progress-bar off .
            python -m pip install --progress-bar off .[doc]
            python -m pip install --progress-bar off git+https://github.com/mne-tools/mne-python
      - save_cache:
          name: Save pip cache
          key: pip-cache
          paths:
            - ~/.cache/pip
      - save_cache:
          name: Save install-bin-cache
          key: user-install-bin-cache
          paths:
            - ~/.local/lib/python3.9/site-packages
            - ~/.local/bin
      - run:
          name: Check pip package versions
          command: pip freeze
      - run:
          name: Display MNE infos
          command: QT_DEBUG_PLUGINS=1 mne sys_info -pd
      - run:
          name: Check installation
          command: |
              LIBGL_DEBUG=verbose python -c "import matplotlib.pyplot as plt; plt.figure()"
              python -c "import mne; mne.set_config('MNE_LOGGING_LEVEL', 'info')"
              python -c "import mne; level = mne.get_config('MNE_LOGGING_LEVEL'); assert level.lower() == 'info', repr(level)"
              python -c "import numpy; numpy.show_config()"
      - run:
          name: Build documentation
          command: |
            cd doc
            make html
      # Save the example test results
      - store_test_results:
          path: doc/_build/test-results
      - store_artifacts:
          path: doc/_build/test-results
          destination: test-results
      # Save the SG RST
      - store_artifacts:
          path: doc/auto_examples.zip
      - store_artifacts:
          path: doc/generated.zip
      # Save the outputs
      - store_artifacts:
          path: doc/_build/html/
          destination: dev
      # - store_artifacts:
      #     path: doc/_build/html_stable/
      #     destination: stable
      - persist_to_workspace:
          root: doc/_build
          paths:
            - html
            # - html_stable

  docs-deploy:
    # will only be run on master branch
    docker:
      - image: node:8.10.0
    steps:
      - checkout

      - attach_workspace:
          at: docs/_build

      - run:
          name: Install and configure dependencies
          command: |
            npm install --global gh-pages@3.0
            git config --global user.email "circle@mne.com"
            git config --global user.name "Circle Ci"

      - add_ssh_keys:
          fingerprints:
            - "35:48:e2:58:4c:3f:44:b9:0e:64:40:60:06:d2:1f:bf"

      - run:
          # push built docs into the `dev` directory on the `gh-pages` branch
          name: Deploy docs to gh-pages branch
          command: gh-pages --dotfiles --message "doc updates [skip ci]" --dist docs/_build/html --dest ./dev

workflows:
  commit:
    jobs:
      - build_doc
      - docs-deploy:
          requires:
            - build_doc
          filters:
            branches:
              only: main
